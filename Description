1 e 2º Commit, criando projeto:

Criação da janela do jogo, extendendo ao Canvas e implementando Runnable, método run
tamanho editavel multiplicado pela escala, pensando em um jogo em pixel.


3º Commit - Executando modo Looping com mensagem em console.

Testando com mensagens no console o modo looping, adicionado Thread, thread é quando se
á varios processos sendo executado no seu projeto, adicioando algumas variaveis private
Thread thread, private Booolean isRunning recebendo verdadeiro, isRunning quer dizer se 
o jogo está sendo executavel se sim ele rodara infinitamente.

4º Commit - Editando FPS.

Criando variável long tempo final recebendo nanoTime, double amount.., o valor de 60.0,
o nosso valor de FPS, double ns recebendo o valor de 1000000000 dividido por amount...
double delta recebe zero, int frames recebe 0, dobule timer recebe currentTimeMills
Dentro da função while, long now recebe nanoTime, agora iremos usar a variavel delta,
delta mais igual (now - lastTime) divido por ns, lastTime igual a now, função if
se delta for maior ou igual 1, método tick, método render, frames mais mais, delta menos 
menos, após chaves se System.currentTimeMills meno que timer maior ou igual 1000, mensagem
no console FPS: + frames, frames igual a zero e timer mais igual 1000. Com isso no console
sera mostrado em FPS o valor da execução em frames.

5º Commit - Trabalhando com renderização e Buffers.

No método render vamos adicionar BufferStrategy, ele otimiza a nossa renderização e é usado 
por varios jogos uma forma mais profissional de se trablahar com gráficos, Graphics g passa 
a ser igual a bs.getDrawGraphics. Fazendo teste de demonstração de um retangulo na tela,apenas 
com funções do própio Graphics setar a cor, g.setColor(new Color(19,19,19), usando rgb, imagem 
retangulo g.fillRect(0,0,200,200), bs.show(), desenha na tela. Outro tipo usando BufferdImage
criando nova variável private BufferedImage imagem, ao construtor imagem e instanciada recebendo 
largura e altura, no método render Graphics g é igual imagem.getGraphics() e g também é igual
bs.getDrawGraphics(), g.drawImage ao seus parametros pega imagem e suas medidas.

6º Commit - Método stop, erro em Thread.
Caso nosso thread de um erro vamos chamar método stop, no método run, em método stop isRunning 
passa a ser false, adicione método thread.join() e aceita exceçoes.

7º Commit - Mostrando grade da tela.
Dentro do método render vamos adicionar linhas para poder trabalhar com cada quadrado, no caso
cada quadrado é de 20 pixel.